{"version":3,"sources":["../../src/components/BinaryPoll/utils.ts","../../src/components/BinaryPoll/BinaryPoll.tsx","../../src/components/MultiplePoll/utils.ts","../../src/components/MultiplePoll/MultiplePoll.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["manageVote","item","countPercentage","animateAnswers","index","results","answer","refs","anotherAnswer","percentage","width","easing","backgroundColor","height","styles","inner","sum","Math","BinaryPoll","question","theme","onVote","isVoted","useState","voted","setVoted","answersContainer","useRef","answer0","answer1","allRefs","useEffect","className","style","alignItems","alignment","color","textColor","ref","role","id","onClick","leftColor","rightColor","answers","restOfAnswers","result","answerBuffer","ans","votes","i","MultiplePoll","isVotedId","answerRefs","createRef","undefined","key","LeafPoll","type","resData","text","resData2","themeData","mainColor","vote","console","log","App","margin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04054cfe.chunk.js","sourcesContent":["import { RefObject } from 'react'\nimport { Result } from '../../types/result'\nimport styles from './BinaryPoll.module.css'\n\nfunction manageVote(\n  results: Result[],\n  item: Result,\n  index: number,\n  refs: RefObject<HTMLDivElement>[]\n): void {\n  item.votes++\n  countPercentage(results)\n  animateAnswers(index, results, refs)\n}\n\nfunction animateAnswers(\n  index: number,\n  results: Result[],\n  refs: RefObject<HTMLDivElement>[]\n): void {\n  const answer: HTMLElement | null = refs[index].current\n  // get not clicked answer element\n  const oppositeIndex: number = index === 0 ? 1 : 0\n  const anotherAnswer: HTMLElement | null = refs[oppositeIndex].current\n  const percentage: number | undefined = results[index].percentage\n\n  if (answer && anotherAnswer && percentage) {\n    // animate background width\n    answer.animate(\n      [\n        { width: '50%', easing: 'ease-out' },\n        { width: `${percentage}%`, easing: 'ease-out' }\n      ],\n      500\n    )\n    anotherAnswer.animate(\n      [\n        { width: '50%', easing: 'ease-out' },\n        { width: `${100 - percentage}%`, easing: 'ease-out' }\n      ],\n      500\n    )\n    answer.style.width = `${percentage}%`\n    anotherAnswer.style.width = `${100 - percentage}%`\n\n    // animate background color\n    answer.animate(\n      [{ backgroundColor: 'white' }, { backgroundColor: '#efefef' }],\n      200\n    )\n    answer.style.backgroundColor = '#EFEFEF'\n\n    // set height to the same value before and after the vote\n    const height: number = answer.offsetHeight\n    answer.style.padding = '0'\n    anotherAnswer.style.padding = '0'\n\n    // disable hovering after the animation\n    answer.classList.remove(styles.answer_hover)\n    anotherAnswer.classList.remove(styles.answer_hover)\n\n    const inner: HTMLElement | null = refs[0].current\n    if (inner) inner.style.height = `${height}px`\n  }\n}\n\nfunction countPercentage(results: Result[]): void {\n  const sum: number = results[0].votes + results[1].votes\n\n  results[0].percentage = Math.round((results[0].votes / sum) * 100)\n  results[1].percentage = Math.round((results[1].votes / sum) * 100)\n}\n\nexport { manageVote, countPercentage, animateAnswers }\n","import React, { useState, useEffect, useRef, RefObject } from 'react'\nimport styles from './BinaryPoll.module.css'\nimport { manageVote, countPercentage, animateAnswers } from './utils'\nimport type { Result } from '../../types/result'\nimport type { Theme } from '../../types/theme'\n\n// move to types if iit will be the same as MultiplePollProps\ninterface BinaryPollProps {\n  question?: string\n  results: Result[]\n  theme?: Theme\n  isVoted?: boolean\n  onVote?(item: Result, results: Result[]): void\n}\n\nconst BinaryPoll = ({\n  question,\n  results,\n  theme,\n  onVote,\n  isVoted\n}: BinaryPollProps) => {\n  const [voted, setVoted] = useState<boolean>(false)\n  const answersContainer = useRef<HTMLDivElement>(null)\n  const answer0 = useRef<HTMLDivElement>(null)\n  const answer1 = useRef<HTMLDivElement>(null)\n  const allRefs: RefObject<HTMLDivElement>[] = [\n    answer0,\n    answer1,\n    answersContainer\n  ]\n\n  useEffect(() => {\n    if (isVoted) {\n      countPercentage(results)\n      animateAnswers(0, results, allRefs)\n      setVoted(true)\n    }\n  }, [])\n\n  return (\n    <article\n      className={styles.container}\n      style={{ alignItems: theme?.alignment }}\n    >\n      {question && <h1 style={{ color: theme?.textColor }}>{question}</h1>}\n\n      <div\n        ref={answersContainer}\n        className={styles.inner}\n        style={{ backgroundColor: theme?.backgroundColor }}\n      >\n        <div\n          ref={answer0}\n          role='button'\n          className={styles.answer_hover + ' ' + styles.answer}\n          id='binAnswer0'\n          onClick={() => {\n            if (!voted) {\n              setVoted(true)\n              manageVote(results, results[0], 0, allRefs)\n              onVote?.(results[0], results)\n            }\n          }}\n        >\n          <div className={styles.answerContainer}>\n            <p style={{ color: theme?.leftColor }}>{results[0].text}</p>\n            {voted && (\n              <span style={{ color: theme?.textColor }}>\n                {results[0].percentage}%\n              </span>\n            )}\n          </div>\n        </div>\n        <div\n          ref={answer1}\n          role='button'\n          className={styles.answer_hover + ' ' + styles.answer}\n          id='binAnswer1'\n          onClick={() => {\n            if (!voted) {\n              setVoted(true)\n              manageVote(results, results[1], 1, allRefs)\n              onVote?.(results[1], results)\n            }\n          }}\n        >\n          <div className={styles.answerContainer}>\n            <p style={{ color: theme?.rightColor }}>{results[1].text}</p>\n            {voted && (\n              <span style={{ color: theme?.textColor }}>\n                {results[1].percentage}%\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport { BinaryPoll, BinaryPollProps }\n","import { RefObject, MutableRefObject } from 'react'\nimport { Result } from '../../types/result'\nimport { Theme } from '../../types/theme'\n\nfunction manageVote(\n  results: Result[],\n  item: Result,\n  refs: MutableRefObject<RefObject<HTMLDivElement>[]>,\n  theme?: Theme\n): void {\n  item.votes++\n  countPercentage(results)\n  animateAnswers(results, refs, theme, item.id)\n}\n\nfunction animateAnswers(\n  results: Result[],\n  refs: MutableRefObject<RefObject<HTMLDivElement>[]>,\n  theme?: Theme,\n  index?: number,\n  isVotedId?: number\n): void {\n  const answers: HTMLElement[] = []\n  let restOfAnswers: Result[] = []\n\n  for (const result of results) {\n    if (index !== undefined) {\n      result.id !== index && restOfAnswers.push(result)\n    } else {\n      restOfAnswers = results\n    }\n    const answerBuffer: HTMLElement | null = refs.current[result.id].current\n    answerBuffer && answers.push(answerBuffer)\n  }\n\n  if (index !== undefined) {\n    // animate clicked answer\n    answers[index].animate(\n      [\n        { width: 0, easing: 'ease-out', backgroundColor: 'white' },\n        {\n          width: `${results[index].percentage}%`,\n          easing: 'ease-out',\n          backgroundColor: `${theme?.mainColor}`\n        }\n      ],\n      500\n    )\n    answers[index].style.width = `${results[index].percentage}%`\n    if (theme?.mainColor)\n      answers[index].style.backgroundColor = theme?.mainColor\n  }\n\n  // animate rest of answers (not clicked)\n  for (const ans of restOfAnswers) {\n    answers[ans.id].animate(\n      [\n        { width: 0, easing: 'ease-out', backgroundColor: 'white' },\n        {\n          width: `${ans.percentage}%`,\n          easing: 'ease-out',\n          backgroundColor: `${\n            ans.id === isVotedId ? theme?.mainColor : '#efefef'\n          }`\n        }\n      ],\n      500\n    )\n    answers[ans.id].style.width = `${ans.percentage}%`\n    answers[ans.id].style.backgroundColor = `${\n      ans.id === isVotedId ? theme?.mainColor : '#efefef'\n    }`\n  }\n}\n\nfunction countPercentage(results: Result[]): void {\n  const votes: number[] = []\n  let sum: number = 0\n\n  for (const result of results) {\n    votes.push(result.votes)\n    sum += result.votes\n  }\n\n  for (let i = 0; i < votes.length; i++) {\n    results[i].percentage = sum === 0 ? 0 : Math.floor((votes[i] / sum) * 100)\n  }\n}\n\nexport { manageVote, countPercentage, animateAnswers }\n","import React, { useState, useEffect, useRef, createRef, RefObject } from 'react'\r\nimport styles from './MultiplePoll.module.css'\r\nimport { manageVote, countPercentage, animateAnswers } from './utils'\r\n//import { manageVote } from './utils'\r\nimport type { Result } from '../../types/result'\r\nimport type { Theme } from '../../types/theme'\r\n\r\ninterface MultiplePollProps {\r\n  question?: string\r\n  results: Result[]\r\n  theme?: Theme\r\n  isVoted?: boolean\r\n  isVotedId?: number\r\n  onVote?(item: Result, results: Result[]): void\r\n}\r\n\r\nconst MultiplePoll = ({\r\n  question,\r\n  results,\r\n  theme,\r\n  onVote,\r\n  isVoted,\r\n  isVotedId,\r\n}: MultiplePollProps) => {\r\n  const [voted, setVoted] = useState<boolean>(false)\r\n  const answerRefs = useRef<RefObject<HTMLDivElement>[]>(\r\n    results.map(() => createRef<HTMLDivElement>())\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (isVoted) {\r\n      countPercentage(results)\r\n      animateAnswers(results, answerRefs, theme, undefined, isVotedId)\r\n      setVoted(true)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <article\r\n      className={styles.container}\r\n      style={{ alignItems: theme?.alignment }}\r\n    >\r\n      {question && <h1 style={{ color: theme?.textColor }}>{question}</h1>}\r\n\r\n      {results.map((result) => (\r\n        <div\r\n          key={result.id}\r\n          role='button'\r\n          id={'mulAnswer' + result.id}\r\n          className={\r\n            voted ? styles.answer : styles.answer_hover + ' ' + styles.answer\r\n          }\r\n          style={{\r\n            backgroundColor: theme?.backgroundColor\r\n          }}\r\n          onClick={() => {\r\n            if (!voted) {\r\n              setVoted(true)\r\n              manageVote(results, result, answerRefs, theme)\r\n              onVote?.(result, results)\r\n            }\r\n          }}\r\n        >\r\n          <div\r\n            ref={answerRefs.current[result.id]}\r\n            className={styles.answerInner}\r\n          >\r\n            <p style={{ color: theme?.textColor }}>{result.text}</p>\r\n          </div>\r\n          {voted && (\r\n            <span style={{ color: theme?.textColor }}>\r\n              {result.percentage}%\r\n            </span>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </article>\r\n  )\r\n}\r\n\r\nexport { MultiplePoll, MultiplePollProps }\r\n","import * as React from 'react'\nimport { BinaryPoll, BinaryPollProps } from './components/BinaryPoll/BinaryPoll'\nimport {\n  MultiplePoll,\n  MultiplePollProps\n} from './components/MultiplePoll/MultiplePoll'\nimport { Result } from './types/result'\n\ninterface Props extends BinaryPollProps, MultiplePollProps {\n  type: 'binary' | 'multiple'\n}\n\nconst LeafPoll = ({\n  type,\n  question,\n  results,\n  theme,\n  onVote,\n  isVoted = false,\n  isVotedId\n}: Props) => {\n  return type === 'binary' ? (\n    <BinaryPoll\n      question={question}\n      results={results}\n      theme={theme}\n      onVote={onVote}\n      isVoted={isVoted}\n    />\n  ) : (\n    <MultiplePoll\n      question={question}\n      results={results}\n      theme={theme}\n      onVote={onVote}\n      isVoted={isVoted}\n      isVotedId={isVotedId}\n    />\n  )\n}\n\nexport { LeafPoll, Result }\n","import React from 'react'\nimport { LeafPoll, Result } from 'react-leaf-polls'\nimport 'react-leaf-polls/dist/index.css'\n\nconst resData = [\n  { id: 0, text: 'YES', votes: 3 },\n  { id: 1, text: 'NO', votes: 10 }\n]\n\nconst resData2 = [\n  { id: 0, text: 'React', votes: 9 },\n  { id: 1, text: 'Vue', votes: 7 },\n  { id: 2, text: 'Angular', votes: 2 }\n]\n\nconst themeData = {\n  textColor: '#19181f',\n  mainColor: '#00B87B',\n  backgroundColor: 'white',\n  alignment: 'center',\n  leftColor: '#00B87B',\n  rightColor: '#FF2E00'\n}\n\nfunction vote(item: Result, results: Result[]) {\n  console.log('voted', item, results)\n}\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        margin: '300px auto',\n        width: '500px'\n      }}\n    >\n      <LeafPoll\n        type='binary'\n        question='Do you like Angular?'\n        results={resData}\n        theme={themeData}\n        onVote={vote}\n        isVoted={true}\n      />\n      <LeafPoll\n        type='multiple'\n        question='Pick your favourite framework.'\n        results={resData2}\n        theme={themeData}\n        onVote={vote}\n        isVoted={false}\n      />\n      <h2>isVoted w/ id for colouring (only for 'multiple')</h2>\n      <LeafPoll\n        type='multiple'\n        question='Pick your favourite framework.'\n        results={resData2}\n        theme={themeData}\n        onVote={vote}\n        isVoted={true}\n        isVotedId={1}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}